/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dal.ActionDAO;
import dal.ObjectDAO;
import dal.PermissionDAO;
import dal.RoleDAO;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Action;
import model.ObjectModel;
import model.Permission;
import model.RoleModel;
import model.User;

/**
 *
 * @author Nam
 */
public class UserForm extends javax.swing.JFrame {

    private LoginForm parent;
    private User userInfo;
    private DefaultTableModel dtm;

    /**
     * Creates new form UserForm
     */
    public UserForm() {
        initComponents();
    }

    public UserForm(LoginForm p, User user) {
        initComponents();
        parent = p;
        userInfo = user;
        initCustomComps();
    }

    private void initCustomComps() {
        dtm = (DefaultTableModel) tableHistory.getModel();
        this.setTitle("User page");
        loadDataToComboboxes();
    }

    private void loadDataToComboboxes() {
        // load privilege role
        RoleDAO roleDAO = new RoleDAO();
        ArrayList<RoleModel> roles = roleDAO.all();
        for (RoleModel role : roles) {
            System.out.println("1");
            if (isRightTime(role.getFromDay(), role.getToDay(), role.getFromTime(), role.getToTime())
                    && role.getIpAddress().equals(userInfo.getIpAddress())) {
                cbRoleName.addItem(role.getRoleName());
            }
        }
        // load permissions
        PermissionDAO permissionDAO = new PermissionDAO();
        ObjectDAO objectDAO = new ObjectDAO();
        ActionDAO actionDAO = new ActionDAO();
        ArrayList<Permission> permissions = permissionDAO.all();

        for (Permission permission : permissions) {
            ObjectModel obj = objectDAO.getByID(permission.getObjectID());
            Action action = actionDAO.getByID(permission.getActionID());
            if (isRightTime(obj.getFromDay(), obj.getToDay(), obj.getFromTime(), obj.getToTime())
                    && obj.getIpAddress().equals(userInfo.getIpAddress())) {
                cbPermission.addItem(obj.getObjectName() + " -- " + action.getActionName());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel14 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cbRoleName = new javax.swing.JComboBox<>();
        cbPermission = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnExecute = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHistory = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel14.setBackground(new java.awt.Color(76, 41, 211));
        jPanel14.setPreferredSize(new java.awt.Dimension(966, 50));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("<html> Permission Based SOD <br/> in Dynamic RBAC </html>");

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 204, 204));
        jLabel11.setText("User Page");

        jButton2.setBackground(new java.awt.Color(76, 41, 211));
        jButton2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(204, 204, 204));
        jButton2.setText("Logout");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(695, 695, 695))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jButton2))
                .addGap(415, 415, 415))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Role Name");

        cbRoleName.setFont(new java.awt.Font("Segoe UI Historic", 0, 13)); // NOI18N

        cbPermission.setFont(new java.awt.Font("Segoe UI Historic", 0, 13)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Permission");

        btnExecute.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnExecute.setForeground(new java.awt.Color(102, 102, 102));
        btnExecute.setText("Execute");
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(102, 102, 102));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Permission History");

        tableHistory.setFont(new java.awt.Font("Segoe UI Historic", 0, 13)); // NOI18N
        tableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Action", "Object"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableHistory);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(cbPermission, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbRoleName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbRoleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbPermission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExecute)
                    .addComponent(btnCancel))
                .addGap(122, 122, 122))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
        this.dispose();
        parent.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed


    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        String permission = (String) cbPermission.getSelectedItem();
        if (permission == null || permission.equals("")) {
            JOptionPane.showMessageDialog(this, "There's no permission chosen",
                    "Can't Execute", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String action = permission.split("--")[1].trim();
        String obj = permission.split("--")[0].trim();

        ObjectDAO objectDAO = new ObjectDAO();
        ActionDAO actionDAO = new ActionDAO();

        Action act = actionDAO.getByName(action);
        
        int getStuck = -1;
        
        for (int i = 0; i < dtm.getRowCount(); i++) {
            Action act2 = actionDAO.getByName((String) dtm.getValueAt(i, 0));
            if (obj.equals((String) dtm.getValueAt(i, 1))) {
                if (actionDAO.isConflicted(act, act2)) {
                    getStuck = i;
                    
                } 
            } 
        }
        if (getStuck == -1) {
            dtm.addRow(new String[]{action, obj});
                JOptionPane.showMessageDialog(this,
                            "You executed '" + action + "' on " + obj + " successfully",
                            "Execute successfully",
                            JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this,
                            "You can't execute '" + action + "' on " + obj + " because"
                            + " being conflicted with '" 
                            + actionDAO.getByName((String) dtm.getValueAt(getStuck, 0)).getActionName() + "'",
                            "Access Denied",
                            JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnExecuteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        this.dispose();
        parent.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserForm().setVisible(true);
            }
        });
    }

    private boolean isRightTime(String fromDay, String toDay, String fromTime, String toTime) {
        ArrayList<String> weekdays = new ArrayList<>();
        weekdays.add("MONDAY");
        weekdays.add("TUESDAY");
        weekdays.add("WEDNESDAY");
        weekdays.add("THURSDAY");
        weekdays.add("FRIDAY");
        weekdays.add("SATURDAY");
        weekdays.add("SUNDAY");

        Calendar calendar = Calendar.getInstance();
        int day = calendar.get(Calendar.DAY_OF_WEEK);
        String currentDay = null;
        switch (day) {
            case Calendar.SUNDAY:
                currentDay = "SUNDAY";
                break;
            case Calendar.MONDAY:
                currentDay = "MONDAY";
                break;
            case Calendar.TUESDAY:
                currentDay = "TUESDAY";
                break;
            case Calendar.WEDNESDAY:
                currentDay = "WEDNESDAY";
                break;
            case Calendar.THURSDAY:
                currentDay = "THURSDAY";
                break;
            case Calendar.FRIDAY:
                currentDay = "FRIDAY";
                break;
            case Calendar.SATURDAY:
                currentDay = "SATURDAY";
                break;
        }

        int indFromDay = weekdays.indexOf(fromDay);
        int indToDay = weekdays.indexOf(toDay);
        int indCurrentDay = weekdays.indexOf(currentDay);
        if (indFromDay > indToDay) {
            if (indFromDay <= indCurrentDay && indCurrentDay <= indToDay) {
                return false;
            }
        } else {
            if (indCurrentDay > indToDay || indCurrentDay < indFromDay) {
                return false;
            }
        }

        LocalDateTime ldt = LocalDateTime.now().plusDays(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm:ss a");
        String curTime = formatter.format(ldt);
        return isBetween(fromTime, curTime, toTime);
        
    }

    public boolean isBetween(String range1, String time, String range2) {
        try {
            SimpleDateFormat date12format = new SimpleDateFormat("hh:mm:ss a");
            SimpleDateFormat date24format1 = new SimpleDateFormat("HH:mm:ss");
            Date time1 = date24format1.parse(date24format1.format(date12format.parse(range1)));
            Calendar calendar1 = Calendar.getInstance();
            calendar1.setTime(time1);
            
            SimpleDateFormat date24format2 = new SimpleDateFormat("HH:mm:ss");
            Date time2 = date24format2.parse(date24format2.format(date12format.parse(range2)));
            Calendar calendar2 = Calendar.getInstance();
            calendar2.setTime(time2);
            if (calendar1.after(calendar2)) {
                calendar2.add(Calendar.DATE, 1);
            }
            
            SimpleDateFormat date24format3 = new SimpleDateFormat("HH:mm:ss");
            Date d = date24format3.parse(date24format3.format(date12format.parse(time)));
            Calendar calendar3 = Calendar.getInstance();
            calendar3.setTime(d);
            if (calendar1.after(calendar3))
                calendar3.add(Calendar.DATE, 1);
            
            Date current_time = calendar3.getTime();
            return current_time.after(calendar1.getTime()) && current_time.before(calendar2.getTime());
        } catch (ParseException e) {
        }
        return false;
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnExecute;
    private javax.swing.JComboBox<String> cbPermission;
    private javax.swing.JComboBox<String> cbRoleName;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableHistory;
    // End of variables declaration//GEN-END:variables
}
